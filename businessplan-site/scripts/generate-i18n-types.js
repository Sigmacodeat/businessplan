#!/usr/bin/env node
/**
 * Generate TypeScript union type of I18n keys.
 * Preferred Quelle: src/i18n/messages/combined.json (falls vorhanden)
 * Fallback: erzeugt leere Typen, wenn keine kombinierte Datei existiert.
 * Output: src/i18n/messages/keys.d.ts
 */
const fs = require('fs');
const path = require('path');

const COMBINED_PATH = path.join(process.cwd(), 'src/i18n/messages/combined.json');
const OUT_PATH = path.join(process.cwd(), 'src/i18n/messages/keys.d.ts');

function isLocalePair(obj) {
  if (obj && typeof obj === 'object' && !Array.isArray(obj)) {
    const keys = Object.keys(obj);
    return (
      (keys.length === 2 && keys.includes('de') && keys.includes('en')) ||
      (keys.length === 1 && (keys[0] === 'de' || keys[0] === 'en'))
    );
  }
  return false;
}

function collectKeys(obj, prefix = '', out = new Set()) {
  if (obj == null) return out;

  if (Array.isArray(obj)) {
    for (const item of obj) collectKeys(item, prefix, out);
    return out;
  }

  if (typeof obj === 'object') {
    if (isLocalePair(obj)) {
      if (prefix) out.add(prefix);
      return out;
    }
    for (const k of Object.keys(obj)) {
      const nextPrefix = prefix ? `${prefix}.${k}` : k;
      collectKeys(obj[k], nextPrefix, out);
    }
    return out;
  }

  if (typeof obj === 'string' && prefix) {
    out.add(prefix);
  }
  return out;
}

function main() {
  let keys = [];
  if (fs.existsSync(COMBINED_PATH)) {
    const combined = JSON.parse(fs.readFileSync(COMBINED_PATH, 'utf8'));
    keys = Array.from(collectKeys(combined)).sort();
  } else {
    console.warn(`[i18n-types] Hinweis: ${COMBINED_PATH} nicht gefunden. Erzeuge leere Keys-Definition.`);
  }

  const header = `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by scripts/generate-i18n-types.js

export type I18nKey =${keys.length ? '\n' + keys.map((k) => `  | '${k}'`).join('\n') + '\n' : ' never'};

export const I18N_KEYS = [
${keys.map((k) => `  '${k}'`).join(',\n')}
] as const;
`;
  fs.mkdirSync(path.dirname(OUT_PATH), { recursive: true });
  fs.writeFileSync(OUT_PATH, header, 'utf8');
  console.log(`Generated ${OUT_PATH} with ${keys.length} keys.`);
}

main();
